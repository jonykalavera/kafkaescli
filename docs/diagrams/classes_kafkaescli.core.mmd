classDiagram
  class AsyncHookCallback {
  }
  class AsyncService {
    execute() -> Result[R, BaseException]
  }
  class Config {
    extra : str
    use_enum_values : bool
  }
  class Config {
    extra : str
  }
  class Config {
    json_encoders : dict
  }
  class Config {
    extra : str
  }
  class Config {
    json_encoders : dict
  }
  class ConfigFile {
    default_profile : Optional[str]
    profiles : List[ConfigProfile]
    version : int
  }
  class ConfigFileService {
    config_file_path : Optional[str]
    execute() -> ConfigFile
  }
  class ConfigProfile {
    config
    name : str
  }
  class ConfigService {
    config_file_service
    overrides : Optional[dict]
    profile_name : Optional[str]
    execute() -> Settings
  }
  class ConsumeService {
    auto_commit_interval_ms : int
    auto_offset_reset : str
    consumer
    group_id : Optional[str]
    hook_after_consume
    limit : int
    topics : List[str]
    webhook : Optional[str]
    webhook_handler
    execute_async() -> Result[AsyncIterator[ConsumerPayload], BaseException]
  }
  class ConsumerPayload {
    key : Optional[JSONSerializable]
    metadata
    value : Union
  }
  class ConsumerProtocol {
    execute(topics: List[str], group_id: Optional[str], enable_auto_commit: bool, auto_offset_reset: str, auto_commit_interval_ms: int) -> Result[AsyncIterator[ConsumerPayload], BaseException]
  }
  class DataModel {
    uuid
  }
  class HookAfterConsumeProtocol {
    execute(bundle: ConsumerPayload) -> Result[ConsumerPayload, BaseException]
  }
  class HookBeforeProduceProtocol {
    call(bundle: JSONSerializable) -> Result[JSONSerializable, BaseException]
    execute_async() -> Result['HookBeforeProduceProtocol', BaseException]
  }
  class Middleware {
    hook_after_consume : Optional[str]
    hook_before_produce : Optional[str]
  }
  class MiddlewareHook {
    name
  }
  class MiddlewareService {
    callback
    config_service
    extra_kwargs : Optional[Dict[str, Any]]
    call(bundle: Bundle) -> Bundle
    execute_async() -> 'MiddlewareService'
  }
  class Model {
  }
  class PayloadMetadata {
    offset : int
    partition : int
    timestamp : int
    topic : str
  }
  class PayloadMetadata {
    offset : int
    partition : int
    timestamp : int
    topic : str
  }
  class ProduceService {
    hook_before_produce
    keys : Optional[List[JSONSerializable]]
    partition : int
    producer
    topic : str
    values : List[JSONSerializable]
    execute_async() -> AsyncIterator[ProducerPayload]
  }
  class ProducerPayload {
    key : Optional[JSONSerializable]
    metadata
    value : Union
  }
  class ProducerProtocol {
    execute(topic: str, value: bytes, key: Optional[bytes], partition) -> Result[ProducerPayload, BaseException]
  }
  class Service {
    execute_async() -> Result[R, BaseException]
  }
  class ServiceInterface {
    execute() -> Result[R, BaseException]
    execute_async() -> Result[R, BaseException]
  }
  class Settings {
    bootstrap_servers : str
    middleware : List[Middleware]
  }
  class SyncHookCallback {
  }
  class WebhookHandlerProtocol {
    context() -> AsyncContextManager['WebhookHandlerProtocol']
    execute(webhook: Optional[str], payload: ConsumerPayload) -> Result[None, BaseException]
  }
  ConfigFile --|> Model
  ConfigProfile --|> Model
  ConfigFileService --|> Service
  ConfigService --|> Service
  ConsumerPayload --|> DataModel
  PayloadMetadata --|> Model
  ConsumeService --|> AsyncService
  Middleware --|> Model
  MiddlewareService --|> AsyncService
  DataModel --|> Model
  PayloadMetadata --|> Model
  ProducerPayload --|> DataModel
  ProduceService --|> AsyncService
  AsyncService --|> ServiceInterface
  Service --|> ServiceInterface
  Settings --* ConfigProfile : config
  ConfigFileService --* ConfigService : config_file_service
  ConfigService --* MiddlewareService : config_service
  PayloadMetadata --* ConsumerPayload : metadata
  ConsumerProtocol --* ConsumeService : consumer
  HookAfterConsumeProtocol --* ConsumeService : hook_after_consume
  WebhookHandlerProtocol --* ConsumeService : webhook_handler
  MiddlewareHook --* MiddlewareService : callback
  PayloadMetadata --* ProducerPayload : metadata
  HookBeforeProduceProtocol --* ProduceService : hook_before_produce
  ProducerProtocol --* ProduceService : producer
